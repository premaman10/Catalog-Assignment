You are given a JSON file that contains a set of secret shares encoded 
in various numeral systems, along with metadata specifying the total number of shares `n` 
and the threshold `k` required to reconstruct the original secret. 
Each share is represented as a key-value pair where the key is the `x` coordinate,
and the value includes a base and a `y` value encoded in that base.
Your task is to decode these values and use any `k` shares to reconstruct the original polynomial of degree `k-1`
using either Lagrange interpolation or matrix inversion (Vandermonde matrix method). 
The constant term of this polynomial represents the original secret. 
Since some shares may be incorrect or tampered with, you must compute all possible `nCk` combinations, 
identify which combinations consistently yield the same secret, and determine which shares are invalid
by finding those not included in any correct reconstruction.
All calculations must use arbitrary precision integers (BigInt), and no external libraries should be used. 
Finally, you must print the recovered secret and list any incorrect shares.
